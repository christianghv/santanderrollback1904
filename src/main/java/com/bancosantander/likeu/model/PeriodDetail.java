/*
 * Credits
 * The Credits API provides information about customer credit lines.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: gipinacho@santander.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.bancosantander.likeu.model;

import java.util.Objects;
import java.util.List;
/**
 * Retrieves the period basic information
 */

public class PeriodDetail {
 
  private Integer periodId = null;

  
  private java.util.Date initialDate = null;

  
  private java.util.Date dueDate = null;

  private AllOfPeriodDetailAccumulatedPurchases accumulatedPurchases = null;

  private List<PaymentDetail> cardPayment = null;

  private List<RecurrentPaymentDetail> recurrentPayment = null;

  private List<DomiciliationDetail> domiciliation = null;

  private List<AssistanceDetail> assistance = null;

  private List<PayrollDetail> payrollPortability = null;

  private List<DigitalChannelDetail> digitalChannels = null;

  /**
   * Indicates the status of the period.   * &#x60;ONGOING&#x60; -  Indicates that status for period is in progress.   * &#x60;FINISH&#x60; - Indicates that the period has ended. 
   */
  public enum StatusEnum {
    ONGOING("ONGOING"),
    FINISH("FINISH");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
  }  
  
  private StatusEnum status = null;


   /**
   * Period identifier of benefit 
   * @return periodId
  **/
  public Integer getPeriodId() {
    return periodId;
  }

  public void setPeriodId(Integer periodId) {
    this.periodId = periodId;
  }

   /**
   * This date specifies the initial date for the period of benefit [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html
   * @return initialDate
  **/
  public java.util.Date getInitialDate() {
    return initialDate;
  }

  public void setInitialDate(java.util.Date initialDate) {
    this.initialDate = initialDate;
  }

   /**
   * This date specifies the last day for the period to benefit. [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html
   * @return dueDate
  **/
  public java.util.Date getDueDate() {
    return dueDate;
  }

  public void setDueDate(java.util.Date dueDate) {
    this.dueDate = dueDate;
  }

   /**
   * Accumulated amount purchases
   * @return accumulatedPurchases
  **/
  public AllOfPeriodDetailAccumulatedPurchases getAccumulatedPurchases() {
    return accumulatedPurchases;
  }

  public void setAccumulatedPurchases(AllOfPeriodDetailAccumulatedPurchases accumulatedPurchases) {
    this.accumulatedPurchases = accumulatedPurchases;
  }

   /**
   * Indicate the payment card detail.
   * @return cardPayment
  **/
  public List<PaymentDetail> getCardPayment() {
    return cardPayment;
  }

  public void setCardPayment(List<PaymentDetail> cardPayment) {
    this.cardPayment = cardPayment;
  }

   /**
   * Indicates the card recurrent payment detail.
   * @return recurrentPayment
  **/
  public List<RecurrentPaymentDetail> getRecurrentPayment() {
    return recurrentPayment;
  }

  public void setRecurrentPayment(List<RecurrentPaymentDetail> recurrentPayment) {
    this.recurrentPayment = recurrentPayment;
  }

   /**
   * Indicate the status for domiciliation
   * @return domiciliation
  **/
  public List<DomiciliationDetail> getDomiciliation() {
    return domiciliation;
  }

  public void setDomiciliation(List<DomiciliationDetail> domiciliation) {
    this.domiciliation = domiciliation;
  }

   /**
   * Indicate the status for assistance
   * @return assistance
  **/
  public List<AssistanceDetail> getAssistance() {
    return assistance;
  }

  public void setAssistance(List<AssistanceDetail> assistance) {
    this.assistance = assistance;
  }

   /**
   * Displays the customer&#x27;s payroll portability information.
   * @return payrollPortability
  **/
  public List<PayrollDetail> getPayrollPortability() {
    return payrollPortability;
  }

  public void setPayrollPortability(List<PayrollDetail> payrollPortability) {
    this.payrollPortability = payrollPortability;
  }

   /**
   * Displays if the customer has used digital channels.
   * @return digitalChannels
  **/
  public List<DigitalChannelDetail> getDigitalChannels() {
    return digitalChannels;
  }

  public void setDigitalChannels(List<DigitalChannelDetail> digitalChannels) {
    this.digitalChannels = digitalChannels;
  }

   /**
   * Indicates the status of the period.   * &#x60;ONGOING&#x60; -  Indicates that status for period is in progress.   * &#x60;FINISH&#x60; - Indicates that the period has ended. 
   * @return status
  **/
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeriodDetail periodDetail = (PeriodDetail) o;
    return Objects.equals(this.periodId, periodDetail.periodId) &&
        Objects.equals(this.initialDate, periodDetail.initialDate) &&
        Objects.equals(this.dueDate, periodDetail.dueDate) &&
        Objects.equals(this.accumulatedPurchases, periodDetail.accumulatedPurchases) &&
        Objects.equals(this.cardPayment, periodDetail.cardPayment) &&
        Objects.equals(this.recurrentPayment, periodDetail.recurrentPayment) &&
        Objects.equals(this.domiciliation, periodDetail.domiciliation) &&
        Objects.equals(this.assistance, periodDetail.assistance) &&
        Objects.equals(this.payrollPortability, periodDetail.payrollPortability) &&
        Objects.equals(this.digitalChannels, periodDetail.digitalChannels) &&
        Objects.equals(this.status, periodDetail.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(periodId, initialDate, dueDate, accumulatedPurchases, cardPayment, recurrentPayment, domiciliation, assistance, payrollPortability, digitalChannels, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeriodDetail {\n");
    
    sb.append("    periodId: ").append(toIndentedString(periodId)).append("\n");
    sb.append("    initialDate: ").append(toIndentedString(initialDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    accumulatedPurchases: ").append(toIndentedString(accumulatedPurchases)).append("\n");
    sb.append("    cardPayment: ").append(toIndentedString(cardPayment)).append("\n");
    sb.append("    recurrentPayment: ").append(toIndentedString(recurrentPayment)).append("\n");
    sb.append("    domiciliation: ").append(toIndentedString(domiciliation)).append("\n");
    sb.append("    assistance: ").append(toIndentedString(assistance)).append("\n");
    sb.append("    payrollPortability: ").append(toIndentedString(payrollPortability)).append("\n");
    sb.append("    digitalChannels: ").append(toIndentedString(digitalChannels)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
